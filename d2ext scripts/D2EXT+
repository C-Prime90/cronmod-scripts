#!/system/bin/sh
#################################
##   CronMod D2EXT+ -- Final   ##
## Written by CronicCorey @xda ##
##           40d2ext           ##
#################################

## Set SD cache size
if [ -e /sys/devices/virtual/bdi/179:0/read_ahead_kb ]
then
  /system/xbin/echo "2048" > /sys/devices/virtual/bdi/179:0/read_ahead_kb;
fi;

## Unmount /sd-ext if it already mounted
busybox umount /sd-ext;

## Make new mount point
if [ ! -e /data_internal ]
then
busybox mount -o remount,rw -t yaffs2 /;
busybox mkdir /data_internal;
busybox mount -o remount,ro -t yaffs2 /;
fi;

## Mount /data and move mount point to /data_internal
busybox mount --move /data /data_internal;

## Mount mmcblk0p2 to /data
busybox mount -o noatime,nodiratime,nosuid,nodev  /dev/block/mmcblk0p2 /data;
mountext=`busybox mount | egrep 'ext2|ext3|ext4'`;
if [ -n "$mountext" ]; 
then
busybox chown 1000:1000 /data;
busybox chmod 771 /data;
fi;

## Make symlinks and move existing files
if [ ! -e /data/app ]
then
busybox mv /data_internal/* /data;
busybox ln -sf /data/* /data_internal;
busybox rm -rf /data_internal/dalvik-cache;
busybox rm -rf /data_internal/property;
busybox rm /data_internal/zipalign.log;
fi;

## Move dalvik-cache and property back to internal
if [ ! -e /data_internal/dalvik-cache ]
then
busybox mv /data/dalvik-cache /data_internal;
busybox ln -sf /data_internal/dalvik-cache /data;
fi;

if [ ! -e /data_internal/property ]
then
busybox mv /data/property /data_internal;
busybox ln -sf /data_internal/property /data;
fi;

sync;

############################################################################################################################################################

########################################################
##              Bind Cache by CyanogenMod             ##
## bind mount /data/local/download to /cache/download ##
##           if cache partition is too small          ##
########################################################

CACHESIZE=$(df -k /cache | tail -n1 | tr -s ' ' | cut -d ' ' -f2)
DATAONLY=$(getprop dalvik.vm.dexopt-data-only)
if [ "$DATAONLY" = "1" ]
then
  NEEDED=60000
else
  NEEDED=105000
fi;

if [ $CACHESIZE -lt $NEEDED ]
then
  mount -o bind /data/local/download /cache/download;
fi;

rm /cache/download/downloadfile*.apk >/dev/null 2>&1;

sync;

############################################################################################################################################################

######################################################################
##                 Automatic ZipAlign by Wes Garner                 ##
## ZipAlign files in /data that have not been previously ZipAligned ##
##                Thanks to oknowton for the changes                ##
######################################################################

LOG_FILE=/data/zipalign.log
    if [ -e $LOG_FILE ]; then
    	rm $LOG_FILE;
    fi;
    	
echo "Starting Automatic ZipAlign" | tee -a $LOG_FILE;
    for apk in /data/app/*.apk ; do
	zipalign -c 4 $apk;
	ZIPCHECK=$?;
	if [ $ZIPCHECK -eq 1 ]; then
		echo ZipAligning $(basename $apk) | tee -a $LOG_FILE;
		zipalign -f 4 $apk /cache/$(basename $apk);
			if [ -e /cache/$(basename $apk) ]; then
				cp -f -p /cache/$(basename $apk) $apk | tee -a $LOG_FILE;
				rm /cache/$(basename $apk);
			else
				echo ZipAligning $(basename $apk) Failed | tee -a $LOG_FILE;
			fi;
	else
		echo ZipAlign already completed on $apk  | tee -a $LOG_FILE;
	fi;
       done;
echo "Automatic ZipAlign finished" | tee -a $LOG_FILE;
